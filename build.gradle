plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'com.modrinth.minotaur' version '2.3.3'
	id 'org.cadixdev.licenser' version '0.6.1'
	id "com.github.breadmoirai.github-release" version "2.4.1"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}+mc${project.minecraft_version}"
group = project.maven_group

loom {
}

repositories {
	maven { url "https://maven.fabricmc.net/" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.siphalor.de/" }
	maven { url "https://jitpack.io/" }
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.minecraft_version}+build.${project.yarn_mappings}"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	include(modApi(fabricApi.module("fabric-api-base", fabric_api_version)))
	include(modApi(fabricApi.module("fabric-networking-api-v1", fabric_api_version)))
	modImplementation(fabricApi.module("fabric-registry-sync-v0", fabric_api_version))
	modImplementation(fabricApi.module("fabric-resource-loader-v0", fabric_api_version))

	modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:9.0.491") {
		exclude group: "net.fabricmc.fabric-api"
	}
	modImplementation("de.siphalor:modsoftheworld-${minecraft_major_version}:${project.modsoftheworld_version}") {
		transitive false
	}

	modRuntimeOnly("com.github.astei:lazydfu:master-SNAPSHOT")

	testmodImplementation sourceSets.main.output
}

//sourceSets.main.java.exclude("de/siphalor/nbtcrafting/compat/**/*REI*")

license {
	header = project.file('LICENSE_HEADER')

	include '**/*.java'
}

processResources {
	inputs.property "version", version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": version
		duplicatesStrategy DuplicatesStrategy.INCLUDE
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = "${project.archives_base_name}-${project.minecraft_major_version}"

			from components.java
			java.withSourcesJar()
		}
	}
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}

// Mod sites

static def getChangelog() {
	return 'git log -1 --format=format:##%x20%s%n%n%b%nRelease%x20by%x20%an --grep Version'.execute().text.trim()
}

task uploadToModSites {
	dependsOn build
	group = "upload"
}

if (project.hasProperty("curseforgeToken")) {
	curseforge {
		apiKey project.curseforgeToken
		project {
			id = "314633"
			releaseType = project.mod_release
			changelogType = "markdown"
			changelog = project.getChangelog()
			addGameVersion("Fabric")
			for (version in ((String) project.mod_mc_versions).split(";")) {
				addGameVersion(version)
			}
			relations {
				embeddedLibrary "fabric-api"
				optionalDependency "roughly-enough-items"
			}
			mainArtifact(remapJar) {
				displayName = "[${project.mod_mc_version_specifier}] ${project.mod_version}"
			}
		}
	}
	uploadToModSites.finalizedBy(tasks.curseforge)
}

modrinth {
	if (project.hasProperty("modrinthToken")) {
		token = project.modrinthToken
		uploadToModSites.finalizedBy(tasks.modrinth)
	}

	projectId = "18ztUZP5"
	versionName = "[$project.mod_mc_version_specifier] $project.mod_version"
	versionType = project.mod_release
	changelog = project.getChangelog()
	uploadFile = remapJar
	gameVersions = project.mod_mc_versions.split(";") as List<String>
	loaders = ["fabric"]
}
tasks.modrinth.group = "upload"

if (project.hasProperty("githubToken")) {
	githubRelease {
		token githubToken
		targetCommitish = "$minecraft_major_version-2.0"
		releaseName = "Version $mod_version"
		body = getChangelog()
		releaseAssets remapJar.getArchiveFile()
		prerelease = mod_release != "release"
		overwrite = true
	}
	uploadToModSites.finalizedBy(tasks.githubRelease)
}
